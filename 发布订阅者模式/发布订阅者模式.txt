发布—订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。

1.发布—订阅模式可以广泛应用于异步编程中，这是一种替代传递回调函数的方案。
  比如，我们可以订阅 ajax 请求的 error、succ 等事件。或者如果想在动画的每一帧完成之后做一
  些事情，那我们可以订阅一个事件，然后在动画的每一帧完成之后发布这个事件。在异步编程中使用
  发布—订阅模式，我们就无需过多关注对象在异步运行期间的内部状态，而只需要订阅感兴趣的事件发生点。

2.第二点说明发布—订阅模式可以取代对象之间硬编码的通知机制，一个对象不用再显式地调
  用另外一个对象的某个接口。发布—订阅模式让两个对象松耦合地联系在一起，虽然不太清楚彼
  此的细节，但这不影响它们之间相互通信。当有新的订阅者出现时，发布者的代码不需要任何修
  改；同样发布者需要改变时，也不会影响到之前的订阅者。只要之前约定的事件名没有变化，就
  可以自由地改变它们

  实现发布—订阅模式思路
  1.首先要指定好谁充当发布者（比如售楼处）；
  2.然后给发布者添加一个缓存列表，用于存放回调函数以便通知订阅者（售楼处的花名册）；
  3.最后发布消息的时候，发布者会遍历这个缓存列表，依次触发里面存放的订阅者回调函
数（遍历花名册，挨个发短信）。

优点:
  发布—订阅模式的优点非常明显，一为时间上的解耦，二为对象之间的解耦。它的应用非常
  广泛，既可以用在异步编程中，也可以帮助我们完成更松耦合的代码编写。发布—订阅模式还可
  以用来帮助实现一些别的设计模式，比如中介者模式。

缺点:
  发布—订阅模式也不是完全没有缺点。创建订阅者本身要消耗一定的时间和内存，而
  且当你订阅一个消息后，也许此消息最后都未发生，但这个订阅者会始终存在于内存中。
  发布—订阅模式虽然可以弱化对象之间的联系，但如果过度使用的话，对象和对象之间的必要联
  系也将被深埋在背后，会导致程序难以跟踪维护和理解。特别是有多个发布者和订阅者嵌套到一
  起的时候，要跟踪一个 bug 不是件轻松的事情。
